/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UI_Main.HospitalArea.Clinic;

import Business.Clinicarea.Doctor;
import Business.Clinicarea.PharmacyWork;
import Business_Frame.MainSystem;
import UI_Main.Hospital_class.*;
import Business.EmployeeArea.Employeeclass;
import Business.EnterpriseFrame.Enterprise;
import Business.OrganizationFrame.Clinical_Organization;
import Business.OrganizationFrame.Organization;
import Business.Role.DoctorRole;
import Business.Role.PharmacyRole;
import Business.Role.Roles;
import Business.UserHaandle.UserHandle;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author admin
 */
public class ClinicManageUsersPanel extends javax.swing.JPanel {

    /**
     * Creates new setup ManageUserAccountJPanel
     */
    JPanel userProcessContainer;
    UserHandle account; 
    Clinical_Organization organization; 
    Enterprise enterprise; 
    MainSystem business;

    public ClinicManageUsersPanel(JPanel userProcessContainer, UserHandle account, Clinical_Organization organization, Enterprise enterprise, MainSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.account=account;
        this.business=business;
        this.organization= organization;

       // popOrganizationComboBox();
       // employeeJComboBox.removeAllItems();
        popData();
        populateEmployeeComboBox(organization);
        populateRoleComboBox(organization);
    }

//    public void popOrganizationComboBox() {
//        organizationJComboBox.removeAllItems();
//
//        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
//            organizationJComboBox.addItem(organization);
//        }
//    }
    
    public void populateEmployeeComboBox(Clinical_Organization organization){
        clinicEmpJComboBox.removeAllItems();
        
        for (Employeeclass employee : organization.getEmployeeDirectory().getEmployeeList()){
            clinicEmpJComboBox.addItem(employee);
        }
    }
    
    private void populateRoleComboBox(Clinical_Organization e){
        clinicroleJComboBox.removeAllItems();
        for (Roles role : e.getSupportedRole()){
            clinicroleJComboBox.addItem(role);
        }
    }

    public void popData() {

        DefaultTableModel model = (DefaultTableModel) clinicuserJTable.getModel();

        model.setRowCount(0);

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (UserHandle ua : organization.getUserAccountDirectory().getUserAccountList()) {
                Object row[] = new Object[2];
                row[0] = ua;
                row[1] = ua.getRole();
                ((DefaultTableModel) clinicuserJTable.getModel()).addRow(row);
            }
        }
    }

    /**
     * To initialize the form,the method is invoked within the constructor.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CliniccreateUserJButton = new javax.swing.JButton();
        ClinicnameJTextField = new javax.swing.JTextField();
        lblClinicUsername = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clinicuserJTable = new javax.swing.JTable();
        lblClinicPassword = new javax.swing.JLabel();
        clinicpasswordJTextField = new javax.swing.JTextField();
        lblClinicemp = new javax.swing.JLabel();
        clinicEmpJComboBox = new javax.swing.JComboBox();
        ClinicbackjButton1 = new javax.swing.JButton();
        lblClinicRole = new javax.swing.JLabel();
        clinicroleJComboBox = new javax.swing.JComboBox();
        lblCreateclinic = new javax.swing.JLabel();
        lblViewuser = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 204, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CliniccreateUserJButton.setText("Create");
        CliniccreateUserJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CliniccreateUserJButtonActionPerformed(evt);
            }
        });
        add(CliniccreateUserJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(383, 430, -1, -1));

        ClinicnameJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClinicnameJTextFieldActionPerformed(evt);
            }
        });
        add(ClinicnameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 350, 146, -1));

        lblClinicUsername.setText("User Name");
        add(lblClinicUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(106, 353, -1, -1));

        clinicuserJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User Name", "Role"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(clinicuserJTable);
        if (clinicuserJTable.getColumnModel().getColumnCount() > 0) {
            clinicuserJTable.getColumnModel().getColumn(0).setResizable(false);
            clinicuserJTable.getColumnModel().getColumn(1).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 375, 179));

        lblClinicPassword.setText("Password");
        add(lblClinicPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 393, -1, -1));
        add(clinicpasswordJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 390, 146, -1));

        lblClinicemp.setText("Employee");
        add(lblClinicemp, new org.netbeans.lib.awtextra.AbsoluteConstraints(106, 280, -1, -1));

        add(clinicEmpJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(188, 277, 146, -1));

        ClinicbackjButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ClinicbackjButton1.setText("<< Back");
        ClinicbackjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClinicbackjButton1ActionPerformed(evt);
            }
        });
        add(ClinicbackjButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(66, 444, 112, -1));

        lblClinicRole.setText("Role");
        add(lblClinicRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(106, 324, -1, -1));

        clinicroleJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clinicroleJComboBoxActionPerformed(evt);
            }
        });
        add(clinicroleJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 321, 146, -1));

        lblCreateclinic.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblCreateclinic.setText("Create UserAccounts");
        add(lblCreateclinic, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 240, 170, 20));

        lblViewuser.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblViewuser.setText("View UserAccounts");
        add(lblViewuser, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, 170, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void CliniccreateUserJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CliniccreateUserJButtonActionPerformed
        String userName = ClinicnameJTextField.getText();
        String password = clinicpasswordJTextField.getText();
         if(!((userName.equals("") || (password.equals(""))))){
        if(MainSystem.checkIfUsernameIsUnique(userName)){
        Employeeclass employee = (Employeeclass) clinicEmpJComboBox.getSelectedItem();
        Roles role = (Roles) clinicroleJComboBox.getSelectedItem();
        //ClinicOrganization organizations = null;
//        if (role instanceof PharmaManagerRole){
//            System.out.println("pharmamed()");
//        Pharmacy organizations = new Pharmacy();
//         organizations.getUserAccountDirectory().createUserAccount(userName, password, employee, role);
//        }
//        else{
//           Doctor  organizations = new Doctor();
//            organizations.getUserAccountDirectory().createUserAccount(userName, password, employee, role);
//              System.out.println("dovc()");
//        }
       
        organization.getUserAccountDirectory().createUserAccount(userName, password, employee, role);
        
        popData();
        }
        else{
           JOptionPane.showMessageDialog(null, "Enter a unique username", "Warning", JOptionPane.WARNING_MESSAGE); 
        }
        }else{
             JOptionPane.showMessageDialog(null, "Enter valid value", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_CliniccreateUserJButtonActionPerformed

    private void ClinicbackjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClinicbackjButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_ClinicbackjButton1ActionPerformed

    private void ClinicnameJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClinicnameJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClinicnameJTextFieldActionPerformed

    private void clinicroleJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clinicroleJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clinicroleJComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClinicbackjButton1;
    private javax.swing.JButton CliniccreateUserJButton;
    private javax.swing.JTextField ClinicnameJTextField;
    private javax.swing.JComboBox clinicEmpJComboBox;
    private javax.swing.JTextField clinicpasswordJTextField;
    private javax.swing.JComboBox clinicroleJComboBox;
    private javax.swing.JTable clinicuserJTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblClinicPassword;
    private javax.swing.JLabel lblClinicRole;
    private javax.swing.JLabel lblClinicUsername;
    private javax.swing.JLabel lblClinicemp;
    private javax.swing.JLabel lblCreateclinic;
    private javax.swing.JLabel lblViewuser;
    // End of variables declaration//GEN-END:variables
}
